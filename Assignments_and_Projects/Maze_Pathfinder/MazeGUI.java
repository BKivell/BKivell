import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Brad Kivell (20115449)
 */
public class MazeGUI extends javax.swing.JFrame {

    // Stores reference to maze objects to be used
    public MazeFileLoader mazeFileLoader;
    public MazeGUIDrawer mazeGUIDrawer;

    public MazeGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loadButton = new javax.swing.JButton();
        pathLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        loadButton.setText("Load Maze");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        pathLabel.setText("Path: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loadButton)
                .addGap(18, 18, 18)
                .addComponent(pathLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(474, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadButton)
                    .addComponent(pathLabel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // LOAD BUTTON PRESSED
    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        JFileChooser fileChooserWindow = new JFileChooser(new File(".")); // Opens file chooser window
        FileNameExtensionFilter fileFilter = new FileNameExtensionFilter("", "txt"); // Sets file extension filter
        fileChooserWindow.setFileFilter(fileFilter); // Only allow filter files
        int stateTxtFileChooser = fileChooserWindow.showOpenDialog(null);

        if (stateTxtFileChooser == JFileChooser.APPROVE_OPTION) { // Checks if selected file is valid
            String fileName = fileChooserWindow.getSelectedFile().getPath(); // Gets path of file
            drawNewMaze(fileName); // Draws maze from file at path
            
        }
        updatePathText();
    }//GEN-LAST:event_loadButtonActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MazeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MazeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MazeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MazeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MazeGUI().setVisible(true);
            }
        });
    }

    // Reads file, draws maze based on data
    public void drawNewMaze(String filePath) {
        mazeFileLoader = new MazeFileLoader();
        mazeFileLoader.readFile(filePath); // Builds maze based on file data
        mazeGUIDrawer = new MazeGUIDrawer(this, mazeFileLoader); // Creates mazedrawer with reference to this canvas
        mazeGUIDrawer.drawMaze(this.getGraphics()); // Draws maze to screen
    }

    public void updatePathText() {
        String newText = "";
        for (int i = mazeFileLoader.mazeGraph.pathList.size()-1; i >= 0; i--) {
            newText += mazeFileLoader.mazeGraph.pathList.get(i);
        }
        pathLabel.setText("Path: " + newText);
        pathLabel.repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton loadButton;
    private javax.swing.JLabel pathLabel;
    // End of variables declaration//GEN-END:variables
}
